#pragma kernel CSMain

RWTexture2D<float4> Result;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4 _DirectionalLight;
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

static const float PI = 3.14159265f;

struct Ray
{
	float3 origin;
	float3 direction;
	float3 energy;
};

struct RayHit
{
	float3 position;
	float distance;
	float3 normal;
	float3 albedo;
	float3 specular;
};

struct Sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

StructuredBuffer<Sphere> _Spheres;

Ray CreateRay(float3 pOrigin, float3 pDirection)
{
	Ray ray;
	ray.origin = pOrigin;
	ray.direction = pDirection;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	return ray;
}

RayHit CreateRayHit()
{
	RayHit hit;
	hit.position = float3(0.0f, 0.0f, 0.0f);
	hit.distance = 1.#INF;
	hit.normal = float3(0.0f, 0.0f, 0.0f);
	hit.albedo = float3(0.0f, 0.0f, 0.0f);
	hit.specular = float3(0.0f, 0.0f, 0.0f);
	return hit;
}

Ray CreateCameraRay(float2 pUv)
{
	// Transform the camera origin to world space
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
	// Invert the perspective projection of the view-space position
	float3 direction = mul(_CameraInverseProjection, float4(pUv, 0.0f, 1.0f)).xyz;

	// Transform the direction from camera to world space and normalize
	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

void IntersectGroundPlane(Ray pRay, inout RayHit pBestHit)
{
	// Calculate distance along the ray where the ground plane is intersected
	float t = -pRay.origin.y / pRay.direction.y;
	if (!(pRay.direction.y >= 0) && t > 0 && t < pBestHit.distance)
	{
		pBestHit.distance = t;
		pBestHit.position = pRay.origin + t * pRay.direction;
		pBestHit.normal = normalize(float3(0.0f, 1.0f, 0.0f));
		pBestHit.albedo = float3(0.8f, 0.8f, 0.8f);
		pBestHit.specular = float3(0.04f, 0.04f, 0.04f);
	}
}

void IntersectSphere(Ray pRay, inout RayHit pBestHit, Sphere pSphere)
{
    // Calculate distance along the ray where the sphere is intersected
    float3 d = pRay.origin - pSphere.position;
    float p1 = -dot(pRay.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + pSphere.radius * pSphere.radius;
    if (p2sqr < 0)
        return;
    float p2 = sqrt(p2sqr);
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < pBestHit.distance)
    {
        pBestHit.distance = t;
        pBestHit.position = pRay.origin + t * pRay.direction;
        pBestHit.normal = normalize(pBestHit.position - pSphere.position);
		pBestHit.albedo = pSphere.albedo;
		pBestHit.specular = pSphere.specular;
    }
}

RayHit Trace(Ray pRay)
{
	RayHit bestHit = CreateRayHit();
	IntersectGroundPlane(pRay, bestHit);
	
	// Trace spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
        IntersectSphere(pRay, bestHit, _Spheres[i]);

	return bestHit;
}

float3 Shade(inout Ray pRay, RayHit pHit)
{
	if (pHit.distance < 1.#INF)
    {
        float3 specular = float3(0.04f, 0.04f, 0.04f);
		float3 albedo = float3(0.8f, 0.8f, 0.8f);
        // Reflect the ray and multiply energy with specular reflection
        pRay.origin = pHit.position + pHit.normal * 0.001f;
        pRay.direction = reflect(pRay.direction, pHit.normal);
        pRay.energy *= pHit.specular;
		    
		// Shadow test ray
    	Ray shadowRay = CreateRay(pHit.position + pHit.normal * 0.001f, -1 * _DirectionalLight.xyz);
    	RayHit shadowHit = Trace(shadowRay);
    	if (shadowHit.distance != 1.#INF)
    	{
        	return saturate(dot(pHit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * pHit.albedo * 0.2f;
    	}

        // Return a diffuse-shaded colour
    	return saturate(dot(pHit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * pHit.albedo;
    }
    else
    {
        // Erase the ray's energy - the sky doesn't reflect anything
        pRay.energy = 0.0f;
        // Sample the skybox and write it
        float theta = acos(pRay.direction.y) / -PI;
        float phi = atan2(pRay.direction.x, -pRay.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 1.5f;
    }
	// Return nothing
    return float3(0.0f, 0.0f, 0.0f);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	// Get the dimensions of the RenderTexture
	uint width, height;
	Result.GetDimensions(width, height);

	// Transform pixel to [-1,1] range
	float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);

	// Get a ray for the UVs
	Ray ray = CreateCameraRay(uv);

	// Trace and shade
    float3 result = float3(0, 0, 0);
    for (int i = 0; i < 8; i++)
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);
        if (!any(ray.energy))
            break;
    }

	Result[id.xy] = float4(result, 1);
}
